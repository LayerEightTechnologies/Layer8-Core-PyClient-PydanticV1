# coding: utf-8

"""
    Wavenet Connected API

    Provides a primary resource for buildings, room tenancies for Wavenet connected customers, includes other information such as VLAN information and addresses

    The version of the OpenAPI document: 2.5.x
    Contact: development@wavenetuk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Tenancy(BaseModel):
    """
    Tenancy
    """
    id: Optional[StrictInt] = Field(None, alias="Id")
    room_id: StrictInt = Field(...)
    tenant_id: StrictStr = Field(...)
    roomid: Optional[StrictInt] = None
    start_date: date = Field(...)
    end_date: Optional[date] = None
    start_source: StrictStr = Field(...)
    end_source: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    last_updated: Optional[StrictStr] = None
    __properties = ["Id", "room_id", "tenant_id", "roomid", "start_date", "end_date", "start_source", "end_source", "created_at", "last_updated"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Tenancy:
        """Create an instance of Tenancy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Tenancy:
        """Create an instance of Tenancy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Tenancy.parse_obj(obj)

        _obj = Tenancy.parse_obj({
            "id": obj.get("Id"),
            "room_id": obj.get("room_id"),
            "tenant_id": obj.get("tenant_id"),
            "roomid": obj.get("roomid"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "start_source": obj.get("start_source"),
            "end_source": obj.get("end_source"),
            "created_at": obj.get("created_at"),
            "last_updated": obj.get("last_updated")
        })
        return _obj


