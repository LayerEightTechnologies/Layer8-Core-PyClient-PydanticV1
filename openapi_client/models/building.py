# coding: utf-8

"""
    Wavenet Connected API

    Provides a primary resource for buildings, room tenancies for Wavenet connected customers, includes other information such as VLAN information and addresses

    The version of the OpenAPI document: 2.5.x
    Contact: development@wavenetuk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.building_coordinate import BuildingCoordinate

class Building(BaseModel):
    """
    Building
    """
    id: Optional[StrictInt] = Field(None, alias="Id")
    building_name: StrictStr = Field(...)
    building_code: StrictStr = Field(...)
    postcode: Optional[StrictStr] = None
    building_operator: StrictInt = Field(...)
    account_manager: Optional[StrictStr] = None
    coordinate: Optional[BuildingCoordinate] = None
    home_account: Optional[StrictStr] = None
    wifi_id: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    last_updated: Optional[StrictStr] = None
    rooms_count: Optional[StrictInt] = None
    live_tenancies_count: Optional[StrictInt] = None
    __properties = ["Id", "building_name", "building_code", "postcode", "building_operator", "account_manager", "coordinate", "home_account", "wifi_id", "created_at", "last_updated", "rooms_count", "live_tenancies_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Building:
        """Create an instance of Building from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of coordinate
        if self.coordinate:
            _dict['coordinate'] = self.coordinate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Building:
        """Create an instance of Building from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Building.parse_obj(obj)

        _obj = Building.parse_obj({
            "id": obj.get("Id"),
            "building_name": obj.get("building_name"),
            "building_code": obj.get("building_code"),
            "postcode": obj.get("postcode"),
            "building_operator": obj.get("building_operator"),
            "account_manager": obj.get("account_manager"),
            "coordinate": BuildingCoordinate.from_dict(obj.get("coordinate")) if obj.get("coordinate") is not None else None,
            "home_account": obj.get("home_account"),
            "wifi_id": obj.get("wifi_id"),
            "created_at": obj.get("created_at"),
            "last_updated": obj.get("last_updated"),
            "rooms_count": obj.get("rooms_count"),
            "live_tenancies_count": obj.get("live_tenancies_count")
        })
        return _obj


