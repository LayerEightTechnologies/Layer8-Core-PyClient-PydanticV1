# coding: utf-8

"""
    Wavenet Connected API

    Provides a primary resource for buildings, room tenancies for Wavenet connected customers, includes other information such as VLAN information and addresses

    The version of the OpenAPI document: 2.5.x
    Contact: development@wavenetuk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class PutBuildingRequest(BaseModel):
    """
    PutBuildingRequest
    """
    id: StrictInt = Field(...)
    building_name: Optional[StrictStr] = Field(None, alias="Building_name")
    building_code: StrictStr = Field(...)
    building_operator: StrictInt = Field(...)
    postcode: StrictStr = Field(...)
    home_account: StrictStr = Field(...)
    account_manager: StrictStr = Field(...)
    wifi_id: StrictStr = Field(...)
    status: StrictStr = Field(...)
    description: StrictStr = Field(...)
    go_live_date: date = Field(...)
    address_1: StrictStr = Field(...)
    __properties = ["id", "Building_name", "building_code", "building_operator", "postcode", "home_account", "account_manager", "wifi_id", "status", "description", "go_live_date", "address_1"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PutBuildingRequest:
        """Create an instance of PutBuildingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PutBuildingRequest:
        """Create an instance of PutBuildingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PutBuildingRequest.parse_obj(obj)

        _obj = PutBuildingRequest.parse_obj({
            "id": obj.get("id"),
            "building_name": obj.get("Building_name"),
            "building_code": obj.get("building_code"),
            "building_operator": obj.get("building_operator"),
            "postcode": obj.get("postcode"),
            "home_account": obj.get("home_account"),
            "account_manager": obj.get("account_manager"),
            "wifi_id": obj.get("wifi_id"),
            "status": obj.get("status"),
            "description": obj.get("description"),
            "go_live_date": obj.get("go_live_date"),
            "address_1": obj.get("address_1")
        })
        return _obj


